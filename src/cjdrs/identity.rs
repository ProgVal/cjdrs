extern crate crypto;

use std::rand::{OsRng, Rng};
use self::crypto::curve25519::curve25519_base;
use self::crypto::digest::Digest;
use self::crypto::sha2::Sha512;
use Address;

const PRIV_KEY_SIZE: uint = 32;
const PUB_KEY_SIZE: uint = 32;


#[deriving(Copy, Clone, Eq, PartialEq)]
pub struct Identity {
	pub private_key: [u8, ..PRIV_KEY_SIZE],
	pub public_key: [u8, ..PUB_KEY_SIZE],
	pub ip: Address,
}

impl Identity {
	/// Generate a new valid private key, public key and address.
	/// This function generates random private keys and then calls
	/// `from_private_key` as long as a valid one is found.
	pub fn generate() -> Identity {
		let mut rng = match OsRng::new() {
			Err(e) => panic!("No random number generator available: {}", e),
			Ok(r) => r
		};

		loop {
			let mut private_key = [0, ..PRIV_KEY_SIZE];
			rng.fill_bytes(private_key.as_mut_slice());

			match Identity::from_private_key(private_key) {
				Some(address) => return address,
				None => {}
			}
		}
	}

	/// Generate a public key and an address from a private key, if possible.
	/// 
	/// The private key is hashed to a public key using Curve25519. An IPv6
	/// address is then generated by hashing the public key twice using
	/// SHA-512 and taking the first 16 bytes. If the address starts with FC
	/// an Identity is returned, otherwise the address and so the private key
	/// is invalid and None is returned.
	pub fn from_private_key(private_key: [u8, ..PRIV_KEY_SIZE]) -> Option<Identity> {
		let public_key = curve25519_base(private_key.as_slice());
		let double_sha = sha512(&sha512(&public_key));
		
		Address::from_slice(double_sha.slice_to(16)).map(|address| {
			Identity {
				private_key: private_key,
				public_key: public_key,
				ip: address
			}
		})
	}
}


fn sha512(input: &[u8]) -> [u8, ..64] {
	let mut hasher = Sha512::new();
	hasher.input(input);

	let mut output = [0u8, ..64];
	hasher.result(output.as_mut_slice());
	output
}



#[cfg(test)]
mod tests {
	use identity::Identity;
	use identity::sha512;
	use address::Address;

	#[test]
	fn test_generate() {
		let address = Identity::generate().ip;
		assert_eq!(address.as_slice()[0], 0xFC);
	}

	#[test]
	fn test_from_private_key() {
		let priv_key = [
			0x4c, 0x80, 0xb5, 0xfe, 0xe2, 0xad, 0xbd, 0x9a,
			0xeb, 0x80, 0xed, 0xe1, 0xd7, 0x5b, 0xd2, 0xba,
			0x93, 0xc2, 0xa6, 0xea, 0xbe, 0xf3, 0x8b, 0xe1,
			0x8d, 0x4b, 0x8a, 0x41, 0x8d, 0x9a, 0xa0, 0xbc];
		let ip = Address::from_bytes(&[
			0xfc, 0x50, 0x71, 0xae, 0x09, 0xd6, 0xf7, 0x94,
			0x75, 0x54, 0x20, 0x83, 0x87, 0x3e, 0x88, 0xa9]).unwrap();
		assert_eq!(Identity::from_private_key(priv_key).unwrap().ip, ip);


		let priv_key = [
			0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
			0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
			0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24,
			0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0x31, 0x32];
		assert!(Identity::from_private_key(priv_key).is_none());
	}

	#[test]
	fn test_sha512() {
		let input = [];
		let hash = [
			0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd,
			0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
			0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc,
			0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
			0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0,
			0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
			0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81,
			0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e];
		assert_eq!(sha512(input.as_slice()).as_slice(), hash.as_slice());


		let input = "The quick brown fox jumps over the lazy dog".to_string().into_bytes();
		let hash = [
			0x07, 0xe5, 0x47, 0xd9, 0x58, 0x6f, 0x6a, 0x73,
			0xf7, 0x3f, 0xba, 0xc0, 0x43, 0x5e, 0xd7, 0x69,
			0x51, 0x21, 0x8f, 0xb7, 0xd0, 0xc8, 0xd7, 0x88,
			0xa3, 0x09, 0xd7, 0x85, 0x43, 0x6b, 0xbb, 0x64,
			0x2e, 0x93, 0xa2, 0x52, 0xa9, 0x54, 0xf2, 0x39,
			0x12, 0x54, 0x7d, 0x1e, 0x8a, 0x3b, 0x5e, 0xd6,
			0xe1, 0xbf, 0xd7, 0x09, 0x78, 0x21, 0x23, 0x3f,
			0xa0, 0x53, 0x8f, 0x3d, 0xb8, 0x54, 0xfe, 0xe6];
		assert_eq!(sha512(input.as_slice()).as_slice(), hash.as_slice());
	}
}
